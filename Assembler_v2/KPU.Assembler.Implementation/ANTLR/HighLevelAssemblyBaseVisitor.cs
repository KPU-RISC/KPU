//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLR/HighLevelAssembly.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IHighLevelAssemblyVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class HighLevelAssemblyBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IHighLevelAssemblyVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.program"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitProgram([NotNull] HighLevelAssemblyParser.ProgramContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_R8_R8([NotNull] HighLevelAssemblyParser.MOV_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R8_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R8_R16([NotNull] HighLevelAssemblyParser.MOV_I_R8_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R8_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R8_R16([NotNull] HighLevelAssemblyParser.MOV_IPO_R8_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R8_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R8_R16([NotNull] HighLevelAssemblyParser.MOV_IPRO_R8_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R8_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R8_R16([NotNull] HighLevelAssemblyParser.MOV_INO_R8_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R8_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R8_R16([NotNull] HighLevelAssemblyParser.MOV_INRO_R8_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R16_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R16_R8([NotNull] HighLevelAssemblyParser.MOV_IPO_R16_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R16_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R16_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_IPO_R16_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R16_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R16_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_IPO_R16_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R16_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R16_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_IPO_R16_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPO_R16_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPO_R16_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_IPO_R16_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R16_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R16_R8([NotNull] HighLevelAssemblyParser.MOV_IPRO_R16_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R16_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R16_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_IPRO_R16_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R16_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R16_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_IPRO_R16_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R16_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R16_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_IPRO_R16_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_IPRO_R16_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_IPRO_R16_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_IPRO_R16_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R16_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R16_R8([NotNull] HighLevelAssemblyParser.MOV_INO_R16_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R16_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R16_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_INO_R16_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R16_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R16_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_INO_R16_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R16_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R16_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_INO_R16_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INO_R16_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INO_R16_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_INO_R16_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R16_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R16_R8([NotNull] HighLevelAssemblyParser.MOV_INRO_R16_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R16_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R16_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_INRO_R16_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R16_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R16_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_INRO_R16_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R16_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R16_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_INRO_R16_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_INRO_R16_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_INRO_R16_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_INRO_R16_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R16_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R16_R8([NotNull] HighLevelAssemblyParser.MOV_I_R16_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R16_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R16_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.MOV_I_R16_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R16_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R16_CONST_BINARY([NotNull] HighLevelAssemblyParser.MOV_I_R16_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R16_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R16_CONST_HEX1([NotNull] HighLevelAssemblyParser.MOV_I_R16_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV_I_R16_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV_I_R16_CONST_HEX2([NotNull] HighLevelAssemblyParser.MOV_I_R16_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>MOV16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMOV16([NotNull] HighLevelAssemblyParser.MOV16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ADD_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitADD_R8_R8([NotNull] HighLevelAssemblyParser.ADD_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ADD_R16_CONST</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitADD_R16_CONST([NotNull] HighLevelAssemblyParser.ADD_R16_CONSTContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ADC_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitADC_R8_R8([NotNull] HighLevelAssemblyParser.ADC_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>AND_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAND_R8_R8([NotNull] HighLevelAssemblyParser.AND_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>OR_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOR_R8_R8([NotNull] HighLevelAssemblyParser.OR_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>XOR_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitXOR_R8_R8([NotNull] HighLevelAssemblyParser.XOR_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SHL_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSHL_R8([NotNull] HighLevelAssemblyParser.SHL_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SHR_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSHR_R8([NotNull] HighLevelAssemblyParser.SHR_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SAR_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSAR_R8([NotNull] HighLevelAssemblyParser.SAR_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RCL_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRCL_R8([NotNull] HighLevelAssemblyParser.RCL_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RCR_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRCR_R8([NotNull] HighLevelAssemblyParser.RCR_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NOT_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNOT_R8([NotNull] HighLevelAssemblyParser.NOT_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NEG_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNEG_R8([NotNull] HighLevelAssemblyParser.NEG_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>INC_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitINC_R8([NotNull] HighLevelAssemblyParser.INC_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DEC_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDEC_R8([NotNull] HighLevelAssemblyParser.DEC_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUB_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUB_R8_R8([NotNull] HighLevelAssemblyParser.SUB_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SUB_R16_CONST</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSUB_R16_CONST([NotNull] HighLevelAssemblyParser.SUB_R16_CONSTContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>SBB_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSBB_R8_R8([NotNull] HighLevelAssemblyParser.SBB_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CMP_R8_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCMP_R8_R8([NotNull] HighLevelAssemblyParser.CMP_R8_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_R8([NotNull] HighLevelAssemblyParser.PUSH_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_R16([NotNull] HighLevelAssemblyParser.PUSH_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_CONST_BINARY</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_CONST_BINARY([NotNull] HighLevelAssemblyParser.PUSH_CONST_BINARYContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_CONST_DECIMAL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_CONST_DECIMAL([NotNull] HighLevelAssemblyParser.PUSH_CONST_DECIMALContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_CONST_HEX1</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_CONST_HEX1([NotNull] HighLevelAssemblyParser.PUSH_CONST_HEX1Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSH_CONST_HEX2</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSH_CONST_HEX2([NotNull] HighLevelAssemblyParser.PUSH_CONST_HEX2Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>POP_R8</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPOP_R8([NotNull] HighLevelAssemblyParser.POP_R8Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>POP_R16</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPOP_R16([NotNull] HighLevelAssemblyParser.POP_R16Context context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>PUSHF</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPUSHF([NotNull] HighLevelAssemblyParser.PUSHFContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>POPF</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPOPF([NotNull] HighLevelAssemblyParser.POPFContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ENTER</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitENTER([NotNull] HighLevelAssemblyParser.ENTERContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>LEAVE</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLEAVE([NotNull] HighLevelAssemblyParser.LEAVEContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JMP_LABEL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJMP_LABEL([NotNull] HighLevelAssemblyParser.JMP_LABELContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JMP</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJMP([NotNull] HighLevelAssemblyParser.JMPContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JZ</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJZ([NotNull] HighLevelAssemblyParser.JZContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JNZ</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJNZ([NotNull] HighLevelAssemblyParser.JNZContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JNS</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJNS([NotNull] HighLevelAssemblyParser.JNSContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>JNC</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitJNC([NotNull] HighLevelAssemblyParser.JNCContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitCALL([NotNull] HighLevelAssemblyParser.CALLContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>RET</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRET([NotNull] HighLevelAssemblyParser.RETContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>IN</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitIN([NotNull] HighLevelAssemblyParser.INContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>OUT</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOUT([NotNull] HighLevelAssemblyParser.OUTContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>OUTB</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOUTB([NotNull] HighLevelAssemblyParser.OUTBContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>INT</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitINT([NotNull] HighLevelAssemblyParser.INTContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>NOP</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNOP([NotNull] HighLevelAssemblyParser.NOPContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>HLT</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitHLT([NotNull] HighLevelAssemblyParser.HLTContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>DATA</c>
	/// labeled alternative in <see cref="HighLevelAssemblyParser.opcode"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDATA([NotNull] HighLevelAssemblyParser.DATAContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.register_8bit"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRegister_8bit([NotNull] HighLevelAssemblyParser.Register_8bitContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.register_16bit"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRegister_16bit([NotNull] HighLevelAssemblyParser.Register_16bitContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.port_8bit"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPort_8bit([NotNull] HighLevelAssemblyParser.Port_8bitContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.out_port_8bit"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitOut_port_8bit([NotNull] HighLevelAssemblyParser.Out_port_8bitContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.plus_sign"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPlus_sign([NotNull] HighLevelAssemblyParser.Plus_signContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.minus_sign"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitMinus_sign([NotNull] HighLevelAssemblyParser.Minus_signContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="HighLevelAssemblyParser.int"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInt([NotNull] HighLevelAssemblyParser.IntContext context) { return VisitChildren(context); }
}
