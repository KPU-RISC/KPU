//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Github\KPU\Assembler\KPU.Assembler\ANTLR\LowLevelAssembly.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class LowLevelAssemblyParser : Parser {
	public const int
		T__0=1, T__1=2, SET=3, HLT=4, MOV_ALU_IN=5, MOV_ALU_OUT=6, MOV_ALU_C_TO_AB=7, 
		SHL=8, SHR=9, SAR=10, RCL=11, RCR=12, OR=13, ADD=14, ADC=15, SUB=16, SBB=17, 
		XOR=18, AND=19, NOT=20, NEG=21, MOV8=22, NOP=23, MOV=24, MOV16=25, LOAD=26, 
		STORE=27, SAVE_FLAGS=28, RESTORE_FLAGS=29, FLAGS_TO_OUTBUFFER=30, STORE_FLAGS=31, 
		BIT16_ADDER=32, INBUFFER_TO_FLAGS=33, LOAD_FLAGS=34, JMP=35, JZ=36, JNS=37, 
		JNZ=38, JNC=39, CALL=40, RET=41, IN=42, OUT=43, INT=44, DATA=45, REG_8BIT=46, 
		REG_16BIT=47, REG_AB=48, PORT_8BIT=49, OUT_PORT_8BIT=50, PLUS_SIGN=51, 
		MINUS_SIGN=52, FourBitBinaryValue=53, EightBitBinaryValue=54, SixteenBitBinaryValue=55, 
		HexValue=56, JumpLabel=57, NUMBER=58, WS=59, MACRO=60, NEWLINE=61;
	public const int
		RULE_program = 0, RULE_opcode = 1, RULE_register_8bit = 2, RULE_register_16bit = 3, 
		RULE_register_ab = 4, RULE_out_port_8bit = 5, RULE_port_8bit = 6, RULE_plus_sign = 7, 
		RULE_minus_sign = 8, RULE_int = 9;
	public static readonly string[] ruleNames = {
		"program", "opcode", "register_8bit", "register_16bit", "register_ab", 
		"out_port_8bit", "port_8bit", "plus_sign", "minus_sign", "int"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'\"'", "'SET'", "'HLT'", "'MOV_ALU_IN'", "'MOV_ALU_OUT'", 
		"'MOV_ALU_C_TO_AB'", "'SHL'", "'SHR'", "'SAR'", "'RCL'", "'RCR'", "'OR'", 
		"'ADD'", "'ADC'", "'SUB'", "'SBB'", "'XOR'", "'AND'", "'NOT'", "'NEG'", 
		"'MOV8'", "'NOP'", "'MOV'", "'MOV16'", "'LOAD'", "'STORE'", "'SAVE_FLAGS'", 
		"'RESTORE_FLAGS'", "'FLAGS_TO_OUTBUFFER'", "'STORE_FLAGS'", "'16BIT_ADDER'", 
		"'INBUFFER_TO_FLAGS'", "'LOAD_FLAGS'", "'JMP'", "'JZ'", "'JNS'", "'JNZ'", 
		"'JNC'", "'CALL'", "'RET'", "'IN'", "'OUT'", "'INT'", "'DATA'", null, 
		null, null, null, null, "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SET", "HLT", "MOV_ALU_IN", "MOV_ALU_OUT", "MOV_ALU_C_TO_AB", 
		"SHL", "SHR", "SAR", "RCL", "RCR", "OR", "ADD", "ADC", "SUB", "SBB", "XOR", 
		"AND", "NOT", "NEG", "MOV8", "NOP", "MOV", "MOV16", "LOAD", "STORE", "SAVE_FLAGS", 
		"RESTORE_FLAGS", "FLAGS_TO_OUTBUFFER", "STORE_FLAGS", "BIT16_ADDER", "INBUFFER_TO_FLAGS", 
		"LOAD_FLAGS", "JMP", "JZ", "JNS", "JNZ", "JNC", "CALL", "RET", "IN", "OUT", 
		"INT", "DATA", "REG_8BIT", "REG_16BIT", "REG_AB", "PORT_8BIT", "OUT_PORT_8BIT", 
		"PLUS_SIGN", "MINUS_SIGN", "FourBitBinaryValue", "EightBitBinaryValue", 
		"SixteenBitBinaryValue", "HexValue", "JumpLabel", "NUMBER", "WS", "MACRO", 
		"NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LowLevelAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LowLevelAssemblyParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public OpcodeContext[] opcode() {
			return GetRuleContexts<OpcodeContext>();
		}
		public OpcodeContext opcode(int i) {
			return GetRuleContext<OpcodeContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(LowLevelAssemblyParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(LowLevelAssemblyParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 22;
				switch (TokenStream.La(1)) {
				case SET:
				case HLT:
				case MOV_ALU_IN:
				case MOV_ALU_OUT:
				case MOV_ALU_C_TO_AB:
				case SHL:
				case SHR:
				case SAR:
				case RCL:
				case RCR:
				case OR:
				case ADD:
				case ADC:
				case SUB:
				case SBB:
				case XOR:
				case AND:
				case NOT:
				case NEG:
				case MOV8:
				case NOP:
				case MOV:
				case MOV16:
				case LOAD:
				case STORE:
				case SAVE_FLAGS:
				case RESTORE_FLAGS:
				case FLAGS_TO_OUTBUFFER:
				case STORE_FLAGS:
				case BIT16_ADDER:
				case INBUFFER_TO_FLAGS:
				case LOAD_FLAGS:
				case JMP:
				case JZ:
				case JNS:
				case JNZ:
				case JNC:
				case CALL:
				case RET:
				case IN:
				case OUT:
				case INT:
				case DATA:
				case MACRO:
					{
					State = 20; opcode();
					}
					break;
				case NEWLINE:
					{
					State = 21; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET) | (1L << HLT) | (1L << MOV_ALU_IN) | (1L << MOV_ALU_OUT) | (1L << MOV_ALU_C_TO_AB) | (1L << SHL) | (1L << SHR) | (1L << SAR) | (1L << RCL) | (1L << RCR) | (1L << OR) | (1L << ADD) | (1L << ADC) | (1L << SUB) | (1L << SBB) | (1L << XOR) | (1L << AND) | (1L << NOT) | (1L << NEG) | (1L << MOV8) | (1L << NOP) | (1L << MOV) | (1L << MOV16) | (1L << LOAD) | (1L << STORE) | (1L << SAVE_FLAGS) | (1L << RESTORE_FLAGS) | (1L << FLAGS_TO_OUTBUFFER) | (1L << STORE_FLAGS) | (1L << BIT16_ADDER) | (1L << INBUFFER_TO_FLAGS) | (1L << LOAD_FLAGS) | (1L << JMP) | (1L << JZ) | (1L << JNS) | (1L << JNZ) | (1L << JNC) | (1L << CALL) | (1L << RET) | (1L << IN) | (1L << OUT) | (1L << INT) | (1L << DATA) | (1L << MACRO) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
	 
		public OpcodeContext() { }
		public virtual void CopyFrom(OpcodeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RCRContext : OpcodeContext {
		public ITerminalNode RCR() { return GetToken(LowLevelAssemblyParser.RCR, 0); }
		public RCRContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADCContext : OpcodeContext {
		public ITerminalNode ADC() { return GetToken(LowLevelAssemblyParser.ADC, 0); }
		public ADCContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RETContext : OpcodeContext {
		public ITerminalNode RET() { return GetToken(LowLevelAssemblyParser.RET, 0); }
		public RETContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDContext : OpcodeContext {
		public ITerminalNode ADD() { return GetToken(LowLevelAssemblyParser.ADD, 0); }
		public ADDContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CALLContext : OpcodeContext {
		public ITerminalNode CALL() { return GetToken(LowLevelAssemblyParser.CALL, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public CALLContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_ALU_C_TO_ABContext : OpcodeContext {
		public ITerminalNode MOV_ALU_C_TO_AB() { return GetToken(LowLevelAssemblyParser.MOV_ALU_C_TO_AB, 0); }
		public Register_abContext register_ab() {
			return GetRuleContext<Register_abContext>(0);
		}
		public MOV_ALU_C_TO_ABContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_ALU_C_TO_AB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SETContext : OpcodeContext {
		public ITerminalNode SET() { return GetToken(LowLevelAssemblyParser.SET, 0); }
		public Register_abContext register_ab() {
			return GetRuleContext<Register_abContext>(0);
		}
		public ITerminalNode FourBitBinaryValue() { return GetToken(LowLevelAssemblyParser.FourBitBinaryValue, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SETContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SARContext : OpcodeContext {
		public ITerminalNode SAR() { return GetToken(LowLevelAssemblyParser.SAR, 0); }
		public SARContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSAR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOADContext : OpcodeContext {
		public ITerminalNode LOAD() { return GetToken(LowLevelAssemblyParser.LOAD, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public LOADContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOAD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNSContext : OpcodeContext {
		public ITerminalNode JNS() { return GetToken(LowLevelAssemblyParser.JNS, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JNSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INTContext : OpcodeContext {
		public ITerminalNode INT() { return GetToken(LowLevelAssemblyParser.INT, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public INTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STORE_FLAGSContext : OpcodeContext {
		public ITerminalNode STORE_FLAGS() { return GetToken(LowLevelAssemblyParser.STORE_FLAGS, 0); }
		public STORE_FLAGSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTORE_FLAGS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JZContext : OpcodeContext {
		public ITerminalNode JZ() { return GetToken(LowLevelAssemblyParser.JZ, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JZContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJZ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HLTContext : OpcodeContext {
		public ITerminalNode HLT() { return GetToken(LowLevelAssemblyParser.HLT, 0); }
		public HLTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SBBContext : OpcodeContext {
		public ITerminalNode SBB() { return GetToken(LowLevelAssemblyParser.SBB, 0); }
		public SBBContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSBB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LOAD_FLAGSContext : OpcodeContext {
		public ITerminalNode LOAD_FLAGS() { return GetToken(LowLevelAssemblyParser.LOAD_FLAGS, 0); }
		public LOAD_FLAGSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLOAD_FLAGS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SHLContext : OpcodeContext {
		public ITerminalNode SHL() { return GetToken(LowLevelAssemblyParser.SHL, 0); }
		public SHLContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSHL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BIT16_ADDERContext : OpcodeContext {
		public ITerminalNode BIT16_ADDER() { return GetToken(LowLevelAssemblyParser.BIT16_ADDER, 0); }
		public BIT16_ADDERContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBIT16_ADDER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNZContext : OpcodeContext {
		public ITerminalNode JNZ() { return GetToken(LowLevelAssemblyParser.JNZ, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JNZContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNZ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SAVE_FLAGSContext : OpcodeContext {
		public ITerminalNode SAVE_FLAGS() { return GetToken(LowLevelAssemblyParser.SAVE_FLAGS, 0); }
		public SAVE_FLAGSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSAVE_FLAGS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SHRContext : OpcodeContext {
		public ITerminalNode SHR() { return GetToken(LowLevelAssemblyParser.SHR, 0); }
		public SHRContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSHR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JMP_LABELContext : OpcodeContext {
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JMP_LABELContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJMP_LABEL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV8Context : OpcodeContext {
		public ITerminalNode MOV8() { return GetToken(LowLevelAssemblyParser.MOV8, 0); }
		public MOV8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUBContext : OpcodeContext {
		public ITerminalNode SUB() { return GetToken(LowLevelAssemblyParser.SUB, 0); }
		public SUBContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ORContext : OpcodeContext {
		public ITerminalNode OR() { return GetToken(LowLevelAssemblyParser.OR, 0); }
		public ORContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INContext : OpcodeContext {
		public ITerminalNode IN() { return GetToken(LowLevelAssemblyParser.IN, 0); }
		public Port_8bitContext port_8bit() {
			return GetRuleContext<Port_8bitContext>(0);
		}
		public INContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_ALU_INContext : OpcodeContext {
		public ITerminalNode MOV_ALU_IN() { return GetToken(LowLevelAssemblyParser.MOV_ALU_IN, 0); }
		public Register_abContext register_ab() {
			return GetRuleContext<Register_abContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public MOV_ALU_INContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_ALU_IN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RESTORE_FLAGSContext : OpcodeContext {
		public ITerminalNode RESTORE_FLAGS() { return GetToken(LowLevelAssemblyParser.RESTORE_FLAGS, 0); }
		public RESTORE_FLAGSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRESTORE_FLAGS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INBUFFER_TO_FLAGSContext : OpcodeContext {
		public ITerminalNode INBUFFER_TO_FLAGS() { return GetToken(LowLevelAssemblyParser.INBUFFER_TO_FLAGS, 0); }
		public INBUFFER_TO_FLAGSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINBUFFER_TO_FLAGS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JMPContext : OpcodeContext {
		public ITerminalNode JMP() { return GetToken(LowLevelAssemblyParser.JMP, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JMPContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_ALU_OUTContext : OpcodeContext {
		public ITerminalNode MOV_ALU_OUT() { return GetToken(LowLevelAssemblyParser.MOV_ALU_OUT, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public MOV_ALU_OUTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_ALU_OUT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOPContext : OpcodeContext {
		public ITerminalNode NOP() { return GetToken(LowLevelAssemblyParser.NOP, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public NOPContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OUTContext : OpcodeContext {
		public ITerminalNode OUT() { return GetToken(LowLevelAssemblyParser.OUT, 0); }
		public Out_port_8bitContext out_port_8bit() {
			return GetRuleContext<Out_port_8bitContext>(0);
		}
		public OUTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOUT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEGContext : OpcodeContext {
		public ITerminalNode NEG() { return GetToken(LowLevelAssemblyParser.NEG, 0); }
		public NEGContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEG(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOTContext : OpcodeContext {
		public ITerminalNode NOT() { return GetToken(LowLevelAssemblyParser.NOT, 0); }
		public NOTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOVContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(LowLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public MOVContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FLAGS_TO_OUTBUFFERContext : OpcodeContext {
		public ITerminalNode FLAGS_TO_OUTBUFFER() { return GetToken(LowLevelAssemblyParser.FLAGS_TO_OUTBUFFER, 0); }
		public FLAGS_TO_OUTBUFFERContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFLAGS_TO_OUTBUFFER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATAContext : OpcodeContext {
		public ITerminalNode DATA() { return GetToken(LowLevelAssemblyParser.DATA, 0); }
		public ITerminalNode SixteenBitBinaryValue() { return GetToken(LowLevelAssemblyParser.SixteenBitBinaryValue, 0); }
		public ITerminalNode EightBitBinaryValue() { return GetToken(LowLevelAssemblyParser.EightBitBinaryValue, 0); }
		public DATAContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATA(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANDContext : OpcodeContext {
		public ITerminalNode AND() { return GetToken(LowLevelAssemblyParser.AND, 0); }
		public ANDContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MACROContext : OpcodeContext {
		public ITerminalNode MACRO() { return GetToken(LowLevelAssemblyParser.MACRO, 0); }
		public MACROContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMACRO(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STOREContext : OpcodeContext {
		public ITerminalNode STORE() { return GetToken(LowLevelAssemblyParser.STORE, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public STOREContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTORE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCLContext : OpcodeContext {
		public ITerminalNode RCL() { return GetToken(LowLevelAssemblyParser.RCL, 0); }
		public RCLContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XORContext : OpcodeContext {
		public ITerminalNode XOR() { return GetToken(LowLevelAssemblyParser.XOR, 0); }
		public XORContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV16Context : OpcodeContext {
		public ITerminalNode MOV16() { return GetToken(LowLevelAssemblyParser.MOV16, 0); }
		public Register_16bitContext[] register_16bit() {
			return GetRuleContexts<Register_16bitContext>();
		}
		public Register_16bitContext register_16bit(int i) {
			return GetRuleContext<Register_16bitContext>(i);
		}
		public MOV16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNCContext : OpcodeContext {
		public ITerminalNode JNC() { return GetToken(LowLevelAssemblyParser.JNC, 0); }
		public ITerminalNode JumpLabel() { return GetToken(LowLevelAssemblyParser.JumpLabel, 0); }
		public JNCContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_opcode);
		try {
			State = 117;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new SETContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; Match(SET);
				State = 27; register_ab();
				State = 28; Match(T__0);
				State = 29; Match(T__1);
				State = 30; Match(FourBitBinaryValue);
				State = 31; Match(T__1);
				}
				break;
			case 2:
				_localctx = new SETContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; Match(SET);
				State = 34; register_ab();
				State = 35; Match(T__0);
				State = 36; Match(T__1);
				State = 37; Match(FourBitBinaryValue);
				State = 38; Match(T__1);
				State = 39; Match(JumpLabel);
				State = 40; @int();
				}
				break;
			case 3:
				_localctx = new MOV_ALU_INContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; Match(MOV_ALU_IN);
				State = 43; register_ab();
				State = 44; Match(T__0);
				State = 45; register_8bit();
				}
				break;
			case 4:
				_localctx = new MOV_ALU_OUTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 47; Match(MOV_ALU_OUT);
				State = 48; register_8bit();
				}
				break;
			case 5:
				_localctx = new MOV_ALU_C_TO_ABContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 49; Match(MOV_ALU_C_TO_AB);
				State = 50; register_ab();
				}
				break;
			case 6:
				_localctx = new SHLContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 51; Match(SHL);
				}
				break;
			case 7:
				_localctx = new SHRContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 52; Match(SHR);
				}
				break;
			case 8:
				_localctx = new SARContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 53; Match(SAR);
				}
				break;
			case 9:
				_localctx = new RCLContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 54; Match(RCL);
				}
				break;
			case 10:
				_localctx = new RCRContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 55; Match(RCR);
				}
				break;
			case 11:
				_localctx = new ORContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 56; Match(OR);
				}
				break;
			case 12:
				_localctx = new ADDContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 57; Match(ADD);
				}
				break;
			case 13:
				_localctx = new ADCContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 58; Match(ADC);
				}
				break;
			case 14:
				_localctx = new SUBContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 59; Match(SUB);
				}
				break;
			case 15:
				_localctx = new SBBContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 60; Match(SBB);
				}
				break;
			case 16:
				_localctx = new XORContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 61; Match(XOR);
				}
				break;
			case 17:
				_localctx = new ANDContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 62; Match(AND);
				}
				break;
			case 18:
				_localctx = new NOTContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 63; Match(NOT);
				}
				break;
			case 19:
				_localctx = new NEGContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 64; Match(NEG);
				}
				break;
			case 20:
				_localctx = new MOV8Context(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 65; Match(MOV8);
				}
				break;
			case 21:
				_localctx = new NOPContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 66; Match(NOP);
				}
				break;
			case 22:
				_localctx = new NOPContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 67; Match(NOP);
				State = 68; Match(JumpLabel);
				}
				break;
			case 23:
				_localctx = new MOVContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 69; Match(MOV);
				State = 70; register_8bit();
				State = 71; Match(T__0);
				State = 72; register_8bit();
				}
				break;
			case 24:
				_localctx = new MOV16Context(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 74; Match(MOV16);
				State = 75; register_16bit();
				State = 76; Match(T__0);
				State = 77; register_16bit();
				}
				break;
			case 25:
				_localctx = new LOADContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 79; Match(LOAD);
				State = 80; register_8bit();
				}
				break;
			case 26:
				_localctx = new STOREContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 81; Match(STORE);
				State = 82; register_8bit();
				}
				break;
			case 27:
				_localctx = new SAVE_FLAGSContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 83; Match(SAVE_FLAGS);
				}
				break;
			case 28:
				_localctx = new RESTORE_FLAGSContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 84; Match(RESTORE_FLAGS);
				}
				break;
			case 29:
				_localctx = new FLAGS_TO_OUTBUFFERContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 85; Match(FLAGS_TO_OUTBUFFER);
				}
				break;
			case 30:
				_localctx = new STORE_FLAGSContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 86; Match(STORE_FLAGS);
				}
				break;
			case 31:
				_localctx = new INBUFFER_TO_FLAGSContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 87; Match(INBUFFER_TO_FLAGS);
				}
				break;
			case 32:
				_localctx = new LOAD_FLAGSContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 88; Match(LOAD_FLAGS);
				}
				break;
			case 33:
				_localctx = new BIT16_ADDERContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 89; Match(BIT16_ADDER);
				}
				break;
			case 34:
				_localctx = new JMP_LABELContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 90; Match(NOP);
				State = 91; Match(JumpLabel);
				}
				break;
			case 35:
				_localctx = new JMPContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 92; Match(JMP);
				State = 93; Match(JumpLabel);
				}
				break;
			case 36:
				_localctx = new JZContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 94; Match(JZ);
				State = 95; Match(JumpLabel);
				}
				break;
			case 37:
				_localctx = new JNZContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 96; Match(JNZ);
				State = 97; Match(JumpLabel);
				}
				break;
			case 38:
				_localctx = new JNSContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 98; Match(JNS);
				State = 99; Match(JumpLabel);
				}
				break;
			case 39:
				_localctx = new JNCContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 100; Match(JNC);
				State = 101; Match(JumpLabel);
				}
				break;
			case 40:
				_localctx = new CALLContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 102; Match(CALL);
				State = 103; Match(JumpLabel);
				}
				break;
			case 41:
				_localctx = new RETContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 104; Match(RET);
				}
				break;
			case 42:
				_localctx = new INContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 105; Match(IN);
				State = 106; port_8bit();
				}
				break;
			case 43:
				_localctx = new OUTContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 107; Match(OUT);
				State = 108; out_port_8bit();
				}
				break;
			case 44:
				_localctx = new INTContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 109; Match(INT);
				State = 110; @int();
				}
				break;
			case 45:
				_localctx = new HLTContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 111; Match(HLT);
				}
				break;
			case 46:
				_localctx = new DATAContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 112; Match(DATA);
				State = 113; Match(SixteenBitBinaryValue);
				State = 114; Match(T__0);
				State = 115; Match(EightBitBinaryValue);
				}
				break;
			case 47:
				_localctx = new MACROContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 116; Match(MACRO);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_8bitContext : ParserRuleContext {
		public ITerminalNode REG_8BIT() { return GetToken(LowLevelAssemblyParser.REG_8BIT, 0); }
		public Register_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_8bitContext register_8bit() {
		Register_8bitContext _localctx = new Register_8bitContext(Context, State);
		EnterRule(_localctx, 4, RULE_register_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(REG_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_16bitContext : ParserRuleContext {
		public ITerminalNode REG_16BIT() { return GetToken(LowLevelAssemblyParser.REG_16BIT, 0); }
		public Register_16bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_16bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_16bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_16bitContext register_16bit() {
		Register_16bitContext _localctx = new Register_16bitContext(Context, State);
		EnterRule(_localctx, 6, RULE_register_16bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(REG_16BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_abContext : ParserRuleContext {
		public ITerminalNode REG_AB() { return GetToken(LowLevelAssemblyParser.REG_AB, 0); }
		public Register_abContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_ab; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_ab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_abContext register_ab() {
		Register_abContext _localctx = new Register_abContext(Context, State);
		EnterRule(_localctx, 8, RULE_register_ab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(REG_AB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_port_8bitContext : ParserRuleContext {
		public ITerminalNode OUT_PORT_8BIT() { return GetToken(LowLevelAssemblyParser.OUT_PORT_8BIT, 0); }
		public Out_port_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_port_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_port_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_port_8bitContext out_port_8bit() {
		Out_port_8bitContext _localctx = new Out_port_8bitContext(Context, State);
		EnterRule(_localctx, 10, RULE_out_port_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(OUT_PORT_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_8bitContext : ParserRuleContext {
		public ITerminalNode PORT_8BIT() { return GetToken(LowLevelAssemblyParser.PORT_8BIT, 0); }
		public Port_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_8bitContext port_8bit() {
		Port_8bitContext _localctx = new Port_8bitContext(Context, State);
		EnterRule(_localctx, 12, RULE_port_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(PORT_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plus_signContext : ParserRuleContext {
		public ITerminalNode PLUS_SIGN() { return GetToken(LowLevelAssemblyParser.PLUS_SIGN, 0); }
		public Plus_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plus_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plus_signContext plus_sign() {
		Plus_signContext _localctx = new Plus_signContext(Context, State);
		EnterRule(_localctx, 14, RULE_plus_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(PLUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Minus_signContext : ParserRuleContext {
		public ITerminalNode MINUS_SIGN() { return GetToken(LowLevelAssemblyParser.MINUS_SIGN, 0); }
		public Minus_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minus_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Minus_signContext minus_sign() {
		Minus_signContext _localctx = new Minus_signContext(Context, State);
		EnterRule(_localctx, 16, RULE_minus_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(LowLevelAssemblyParser.NUMBER, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILowLevelAssemblyVisitor<TResult> typedVisitor = visitor as ILowLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 18, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3?\x8A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x6\x2\x19\n\x2\r\x2\xE\x2\x1A\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3x\n\x3\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x2\x2\f\x2\x4\x6\b\n\f\xE\x10\x12\x14\x2\x2\xAF\x2\x18"+
		"\x3\x2\x2\x2\x4w\x3\x2\x2\x2\x6y\x3\x2\x2\x2\b{\x3\x2\x2\x2\n}\x3\x2\x2"+
		"\x2\f\x7F\x3\x2\x2\x2\xE\x81\x3\x2\x2\x2\x10\x83\x3\x2\x2\x2\x12\x85\x3"+
		"\x2\x2\x2\x14\x87\x3\x2\x2\x2\x16\x19\x5\x4\x3\x2\x17\x19\a?\x2\x2\x18"+
		"\x16\x3\x2\x2\x2\x18\x17\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x18\x3\x2"+
		"\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x3\x3\x2\x2\x2\x1C\x1D\a\x5\x2\x2\x1D\x1E"+
		"\x5\n\x6\x2\x1E\x1F\a\x3\x2\x2\x1F \a\x4\x2\x2 !\a\x37\x2\x2!\"\a\x4\x2"+
		"\x2\"x\x3\x2\x2\x2#$\a\x5\x2\x2$%\x5\n\x6\x2%&\a\x3\x2\x2&\'\a\x4\x2\x2"+
		"\'(\a\x37\x2\x2()\a\x4\x2\x2)*\a;\x2\x2*+\x5\x14\v\x2+x\x3\x2\x2\x2,-"+
		"\a\a\x2\x2-.\x5\n\x6\x2./\a\x3\x2\x2/\x30\x5\x6\x4\x2\x30x\x3\x2\x2\x2"+
		"\x31\x32\a\b\x2\x2\x32x\x5\x6\x4\x2\x33\x34\a\t\x2\x2\x34x\x5\n\x6\x2"+
		"\x35x\a\n\x2\x2\x36x\a\v\x2\x2\x37x\a\f\x2\x2\x38x\a\r\x2\x2\x39x\a\xE"+
		"\x2\x2:x\a\xF\x2\x2;x\a\x10\x2\x2<x\a\x11\x2\x2=x\a\x12\x2\x2>x\a\x13"+
		"\x2\x2?x\a\x14\x2\x2@x\a\x15\x2\x2\x41x\a\x16\x2\x2\x42x\a\x17\x2\x2\x43"+
		"x\a\x18\x2\x2\x44x\a\x19\x2\x2\x45\x46\a\x19\x2\x2\x46x\a;\x2\x2GH\a\x1A"+
		"\x2\x2HI\x5\x6\x4\x2IJ\a\x3\x2\x2JK\x5\x6\x4\x2Kx\x3\x2\x2\x2LM\a\x1B"+
		"\x2\x2MN\x5\b\x5\x2NO\a\x3\x2\x2OP\x5\b\x5\x2Px\x3\x2\x2\x2QR\a\x1C\x2"+
		"\x2Rx\x5\x6\x4\x2ST\a\x1D\x2\x2Tx\x5\x6\x4\x2Ux\a\x1E\x2\x2Vx\a\x1F\x2"+
		"\x2Wx\a \x2\x2Xx\a!\x2\x2Yx\a#\x2\x2Zx\a$\x2\x2[x\a\"\x2\x2\\]\a\x19\x2"+
		"\x2]x\a;\x2\x2^_\a%\x2\x2_x\a;\x2\x2`\x61\a&\x2\x2\x61x\a;\x2\x2\x62\x63"+
		"\a(\x2\x2\x63x\a;\x2\x2\x64\x65\a\'\x2\x2\x65x\a;\x2\x2\x66g\a)\x2\x2"+
		"gx\a;\x2\x2hi\a*\x2\x2ix\a;\x2\x2jx\a+\x2\x2kl\a,\x2\x2lx\x5\xE\b\x2m"+
		"n\a-\x2\x2nx\x5\f\a\x2op\a.\x2\x2px\x5\x14\v\x2qx\a\x6\x2\x2rs\a/\x2\x2"+
		"st\a\x39\x2\x2tu\a\x3\x2\x2ux\a\x38\x2\x2vx\a>\x2\x2w\x1C\x3\x2\x2\x2"+
		"w#\x3\x2\x2\x2w,\x3\x2\x2\x2w\x31\x3\x2\x2\x2w\x33\x3\x2\x2\x2w\x35\x3"+
		"\x2\x2\x2w\x36\x3\x2\x2\x2w\x37\x3\x2\x2\x2w\x38\x3\x2\x2\x2w\x39\x3\x2"+
		"\x2\x2w:\x3\x2\x2\x2w;\x3\x2\x2\x2w<\x3\x2\x2\x2w=\x3\x2\x2\x2w>\x3\x2"+
		"\x2\x2w?\x3\x2\x2\x2w@\x3\x2\x2\x2w\x41\x3\x2\x2\x2w\x42\x3\x2\x2\x2w"+
		"\x43\x3\x2\x2\x2w\x44\x3\x2\x2\x2w\x45\x3\x2\x2\x2wG\x3\x2\x2\x2wL\x3"+
		"\x2\x2\x2wQ\x3\x2\x2\x2wS\x3\x2\x2\x2wU\x3\x2\x2\x2wV\x3\x2\x2\x2wW\x3"+
		"\x2\x2\x2wX\x3\x2\x2\x2wY\x3\x2\x2\x2wZ\x3\x2\x2\x2w[\x3\x2\x2\x2w\\\x3"+
		"\x2\x2\x2w^\x3\x2\x2\x2w`\x3\x2\x2\x2w\x62\x3\x2\x2\x2w\x64\x3\x2\x2\x2"+
		"w\x66\x3\x2\x2\x2wh\x3\x2\x2\x2wj\x3\x2\x2\x2wk\x3\x2\x2\x2wm\x3\x2\x2"+
		"\x2wo\x3\x2\x2\x2wq\x3\x2\x2\x2wr\x3\x2\x2\x2wv\x3\x2\x2\x2x\x5\x3\x2"+
		"\x2\x2yz\a\x30\x2\x2z\a\x3\x2\x2\x2{|\a\x31\x2\x2|\t\x3\x2\x2\x2}~\a\x32"+
		"\x2\x2~\v\x3\x2\x2\x2\x7F\x80\a\x34\x2\x2\x80\r\x3\x2\x2\x2\x81\x82\a"+
		"\x33\x2\x2\x82\xF\x3\x2\x2\x2\x83\x84\a\x35\x2\x2\x84\x11\x3\x2\x2\x2"+
		"\x85\x86\a\x36\x2\x2\x86\x13\x3\x2\x2\x2\x87\x88\a<\x2\x2\x88\x15\x3\x2"+
		"\x2\x2\x5\x18\x1Aw";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
