//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Github\KPU\Assembler\KPU.Assembler\ANTLR\HighLevelAssembly.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class HighLevelAssemblyParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, MOV=6, ADD=7, ADC=8, AND=9, OR=10, 
		XOR=11, SHL=12, SHR=13, SAR=14, RCL=15, RCR=16, NOT=17, NEG=18, INC=19, 
		DEC=20, SUB=21, SBB=22, CMP=23, PUSH=24, POP=25, PUSHF=26, POPF=27, JMP=28, 
		JZ=29, JNS=30, JNZ=31, JNC=32, CALL=33, RET=34, IN=35, OUT=36, OUTB=37, 
		ENTER=38, LEAVE=39, INT=40, NOP=41, HLT=42, DATA=43, REG_8BIT=44, REG_16BIT=45, 
		PORT_8BIT=46, OUT_PORT_8BIT=47, PLUS_SIGN=48, MINUS_SIGN=49, EightBitBinaryValue=50, 
		SixteenBitBinaryValue=51, HexValue=52, JumpLabel=53, NUMBER=54, WS=55, 
		COMMENTS=56, NEWLINE=57;
	public const int
		RULE_program = 0, RULE_opcode = 1, RULE_register_8bit = 2, RULE_register_16bit = 3, 
		RULE_port_8bit = 4, RULE_out_port_8bit = 5, RULE_plus_sign = 6, RULE_minus_sign = 7, 
		RULE_int = 8;
	public static readonly string[] ruleNames = {
		"program", "opcode", "register_8bit", "register_16bit", "port_8bit", "out_port_8bit", 
		"plus_sign", "minus_sign", "int"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'['", "']'", "'0x'", "'h'", "'MOV'", "'ADD'", "'ADC'", "'AND'", 
		"'OR'", "'XOR'", "'SHL'", "'SHR'", "'SAR'", "'RCL'", "'RCR'", "'NOT'", 
		"'NEG'", "'INC'", "'DEC'", "'SUB'", "'SBB'", "'CMP'", "'PUSH'", "'POP'", 
		"'PUSHF'", "'POPF'", "'JMP'", "'JZ'", "'JNS'", "'JNZ'", "'JNC'", "'CALL'", 
		"'RET'", "'IN'", "'OUT'", "'OUTB'", "'ENTER'", "'LEAVE'", "'INT'", "'NOP'", 
		"'HLT'", "'DATA'", null, null, null, null, "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "MOV", "ADD", "ADC", "AND", "OR", 
		"XOR", "SHL", "SHR", "SAR", "RCL", "RCR", "NOT", "NEG", "INC", "DEC", 
		"SUB", "SBB", "CMP", "PUSH", "POP", "PUSHF", "POPF", "JMP", "JZ", "JNS", 
		"JNZ", "JNC", "CALL", "RET", "IN", "OUT", "OUTB", "ENTER", "LEAVE", "INT", 
		"NOP", "HLT", "DATA", "REG_8BIT", "REG_16BIT", "PORT_8BIT", "OUT_PORT_8BIT", 
		"PLUS_SIGN", "MINUS_SIGN", "EightBitBinaryValue", "SixteenBitBinaryValue", 
		"HexValue", "JumpLabel", "NUMBER", "WS", "COMMENTS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HighLevelAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HighLevelAssemblyParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public OpcodeContext[] opcode() {
			return GetRuleContexts<OpcodeContext>();
		}
		public OpcodeContext opcode(int i) {
			return GetRuleContext<OpcodeContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(HighLevelAssemblyParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(HighLevelAssemblyParser.NEWLINE, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 20;
				switch (TokenStream.La(1)) {
				case MOV:
				case ADD:
				case ADC:
				case AND:
				case OR:
				case XOR:
				case SHL:
				case SHR:
				case SAR:
				case RCL:
				case RCR:
				case NOT:
				case NEG:
				case INC:
				case DEC:
				case SUB:
				case SBB:
				case CMP:
				case PUSH:
				case POP:
				case PUSHF:
				case POPF:
				case JMP:
				case JZ:
				case JNS:
				case JNZ:
				case JNC:
				case CALL:
				case RET:
				case IN:
				case OUT:
				case OUTB:
				case ENTER:
				case LEAVE:
				case INT:
				case NOP:
				case HLT:
				case DATA:
				case JumpLabel:
					{
					State = 18; opcode();
					}
					break;
				case NEWLINE:
					{
					State = 19; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MOV) | (1L << ADD) | (1L << ADC) | (1L << AND) | (1L << OR) | (1L << XOR) | (1L << SHL) | (1L << SHR) | (1L << SAR) | (1L << RCL) | (1L << RCR) | (1L << NOT) | (1L << NEG) | (1L << INC) | (1L << DEC) | (1L << SUB) | (1L << SBB) | (1L << CMP) | (1L << PUSH) | (1L << POP) | (1L << PUSHF) | (1L << POPF) | (1L << JMP) | (1L << JZ) | (1L << JNS) | (1L << JNZ) | (1L << JNC) | (1L << CALL) | (1L << RET) | (1L << IN) | (1L << OUT) | (1L << OUTB) | (1L << ENTER) | (1L << LEAVE) | (1L << INT) | (1L << NOP) | (1L << HLT) | (1L << DATA) | (1L << JumpLabel) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
	 
		public OpcodeContext() { }
		public virtual void CopyFrom(OpcodeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MOV_IPO_R8_R16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_IPO_R8_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R8_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RETContext : OpcodeContext {
		public ITerminalNode RET() { return GetToken(HighLevelAssemblyParser.RET, 0); }
		public RETContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R16_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public MOV_IPRO_R16_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R16_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public PUSH_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public PUSH_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R8_R16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_INO_R8_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R8_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R16_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_IPRO_R16_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R16_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AND_R8_R8Context : OpcodeContext {
		public ITerminalNode AND() { return GetToken(HighLevelAssemblyParser.AND, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public AND_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAND_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUB_R8_R8Context : OpcodeContext {
		public ITerminalNode SUB() { return GetToken(HighLevelAssemblyParser.SUB, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public SUB_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUB_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R16_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_INO_R16_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R16_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R16_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_INO_R16_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R16_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R16_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public MOV_INO_R16_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R16_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R16_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_INRO_R16_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R16_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNSContext : OpcodeContext {
		public ITerminalNode JNS() { return GetToken(HighLevelAssemblyParser.JNS, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JNSContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R16_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_INRO_R16_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R16_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R16_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_INRO_R16_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R16_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class POPFContext : OpcodeContext {
		public ITerminalNode POPF() { return GetToken(HighLevelAssemblyParser.POPF, 0); }
		public POPFContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOPF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNZContext : OpcodeContext {
		public ITerminalNode JNZ() { return GetToken(HighLevelAssemblyParser.JNZ, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JNZContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNZ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R8_R16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public MOV_I_R8_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R8_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPO_R16_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public MOV_IPO_R16_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R16_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R8_R16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public MOV_IPRO_R8_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R8_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPO_R16_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public MOV_IPO_R16_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R16_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R16_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public MOV_INO_R16_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R16_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R16_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_I_R16_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R16_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCR_R8Context : OpcodeContext {
		public ITerminalNode RCR() { return GetToken(HighLevelAssemblyParser.RCR, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public RCR_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCR_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SBB_R8_R8Context : OpcodeContext {
		public ITerminalNode SBB() { return GetToken(HighLevelAssemblyParser.SBB, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public SBB_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSBB_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INContext : OpcodeContext {
		public ITerminalNode IN() { return GetToken(HighLevelAssemblyParser.IN, 0); }
		public Port_8bitContext port_8bit() {
			return GetRuleContext<Port_8bitContext>(0);
		}
		public INContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XOR_R8_R8Context : OpcodeContext {
		public ITerminalNode XOR() { return GetToken(HighLevelAssemblyParser.XOR, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public XOR_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXOR_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOT_R8Context : OpcodeContext {
		public ITerminalNode NOT() { return GetToken(HighLevelAssemblyParser.NOT, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public NOT_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOT_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUB_R16_CONSTContext : OpcodeContext {
		public ITerminalNode SUB() { return GetToken(HighLevelAssemblyParser.SUB, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SUB_R16_CONSTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUB_R16_CONST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NOPContext : OpcodeContext {
		public ITerminalNode NOP() { return GetToken(HighLevelAssemblyParser.NOP, 0); }
		public NOPContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNOP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R8_R16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public MOV_INRO_R8_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R8_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OUTContext : OpcodeContext {
		public ITerminalNode OUT() { return GetToken(HighLevelAssemblyParser.OUT, 0); }
		public Out_port_8bitContext out_port_8bit() {
			return GetRuleContext<Out_port_8bitContext>(0);
		}
		public OUTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOUT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADD_R8_R8Context : OpcodeContext {
		public ITerminalNode ADD() { return GetToken(HighLevelAssemblyParser.ADD, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public ADD_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADD_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DATAContext : OpcodeContext {
		public ITerminalNode DATA() { return GetToken(HighLevelAssemblyParser.DATA, 0); }
		public ITerminalNode SixteenBitBinaryValue() { return GetToken(HighLevelAssemblyParser.SixteenBitBinaryValue, 0); }
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public DATAContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDATA(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R16_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_I_R16_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R16_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SHR_R8Context : OpcodeContext {
		public ITerminalNode SHR() { return GetToken(HighLevelAssemblyParser.SHR, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public SHR_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSHR_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INC_R8Context : OpcodeContext {
		public ITerminalNode INC() { return GetToken(HighLevelAssemblyParser.INC, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public INC_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINC_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class POP_R16Context : OpcodeContext {
		public ITerminalNode POP() { return GetToken(HighLevelAssemblyParser.POP, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public POP_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOP_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPO_R16_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_IPO_R16_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R16_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADD_R16_CONSTContext : OpcodeContext {
		public ITerminalNode ADD() { return GetToken(HighLevelAssemblyParser.ADD, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ADD_R16_CONSTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADD_R16_CONST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CALLContext : OpcodeContext {
		public ITerminalNode CALL() { return GetToken(HighLevelAssemblyParser.CALL, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public CALLContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_R16Context : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public PUSH_R16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_R16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENTERContext : OpcodeContext {
		public ITerminalNode ENTER() { return GetToken(HighLevelAssemblyParser.ENTER, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ENTERContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENTER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADC_R8_R8Context : OpcodeContext {
		public ITerminalNode ADC() { return GetToken(HighLevelAssemblyParser.ADC, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public ADC_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADC_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INTContext : OpcodeContext {
		public ITerminalNode INT() { return GetToken(HighLevelAssemblyParser.INT, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public INTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R16_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_IPRO_R16_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R16_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JZContext : OpcodeContext {
		public ITerminalNode JZ() { return GetToken(HighLevelAssemblyParser.JZ, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JZContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJZ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HLTContext : OpcodeContext {
		public ITerminalNode HLT() { return GetToken(HighLevelAssemblyParser.HLT, 0); }
		public HLTContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHLT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DEC_R8Context : OpcodeContext {
		public ITerminalNode DEC() { return GetToken(HighLevelAssemblyParser.DEC, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public DEC_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDEC_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMP_R8_R8Context : OpcodeContext {
		public ITerminalNode CMP() { return GetToken(HighLevelAssemblyParser.CMP, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public CMP_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMP_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LEAVEContext : OpcodeContext {
		public ITerminalNode LEAVE() { return GetToken(HighLevelAssemblyParser.LEAVE, 0); }
		public LEAVEContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLEAVE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_R8Context : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public PUSH_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SAR_R8Context : OpcodeContext {
		public ITerminalNode SAR() { return GetToken(HighLevelAssemblyParser.SAR, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public SAR_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSAR_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEG_R8Context : OpcodeContext {
		public ITerminalNode NEG() { return GetToken(HighLevelAssemblyParser.NEG, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public NEG_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEG_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JMP_LABELContext : OpcodeContext {
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JMP_LABELContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJMP_LABEL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSHFContext : OpcodeContext {
		public ITerminalNode PUSHF() { return GetToken(HighLevelAssemblyParser.PUSHF, 0); }
		public PUSHFContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSHF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public PUSH_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R16_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_I_R16_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R16_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R16_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public MOV_INRO_R16_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R16_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RCL_R8Context : OpcodeContext {
		public ITerminalNode RCL() { return GetToken(HighLevelAssemblyParser.RCL, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public RCL_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRCL_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R16_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_IPRO_R16_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R16_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JMPContext : OpcodeContext {
		public ITerminalNode JMP() { return GetToken(HighLevelAssemblyParser.JMP, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JMPContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJMP(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPRO_R16_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_IPRO_R16_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPRO_R16_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R16_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_I_R16_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R16_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_R8_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public MOV_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OUTBContext : OpcodeContext {
		public ITerminalNode OUTB() { return GetToken(HighLevelAssemblyParser.OUTB, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public OUTBContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOUTB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SHL_R8Context : OpcodeContext {
		public ITerminalNode SHL() { return GetToken(HighLevelAssemblyParser.SHL, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public SHL_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSHL_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PUSH_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode PUSH() { return GetToken(HighLevelAssemblyParser.PUSH, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PUSH_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPUSH_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OR_R8_R8Context : OpcodeContext {
		public ITerminalNode OR() { return GetToken(HighLevelAssemblyParser.OR, 0); }
		public Register_8bitContext[] register_8bit() {
			return GetRuleContexts<Register_8bitContext>();
		}
		public Register_8bitContext register_8bit(int i) {
			return GetRuleContext<Register_8bitContext>(i);
		}
		public OR_R8_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOR_R8_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class POP_R8Context : OpcodeContext {
		public ITerminalNode POP() { return GetToken(HighLevelAssemblyParser.POP, 0); }
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public POP_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPOP_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INO_R16_CONST_BINARYContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode EightBitBinaryValue() { return GetToken(HighLevelAssemblyParser.EightBitBinaryValue, 0); }
		public MOV_INO_R16_CONST_BINARYContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INO_R16_CONST_BINARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPO_R16_CONST_HEX2Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_IPO_R16_CONST_HEX2Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R16_CONST_HEX2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_IPO_R16_CONST_HEX1Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Plus_signContext plus_sign() {
			return GetRuleContext<Plus_signContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode HexValue() { return GetToken(HighLevelAssemblyParser.HexValue, 0); }
		public MOV_IPO_R16_CONST_HEX1Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_IPO_R16_CONST_HEX1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_INRO_R16_CONST_DECIMALContext : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Minus_signContext minus_sign() {
			return GetRuleContext<Minus_signContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MOV_INRO_R16_CONST_DECIMALContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_INRO_R16_CONST_DECIMAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV16Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext[] register_16bit() {
			return GetRuleContexts<Register_16bitContext>();
		}
		public Register_16bitContext register_16bit(int i) {
			return GetRuleContext<Register_16bitContext>(i);
		}
		public MOV16Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MOV_I_R16_R8Context : OpcodeContext {
		public ITerminalNode MOV() { return GetToken(HighLevelAssemblyParser.MOV, 0); }
		public Register_16bitContext register_16bit() {
			return GetRuleContext<Register_16bitContext>(0);
		}
		public Register_8bitContext register_8bit() {
			return GetRuleContext<Register_8bitContext>(0);
		}
		public MOV_I_R16_R8Context(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMOV_I_R16_R8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JNCContext : OpcodeContext {
		public ITerminalNode JNC() { return GetToken(HighLevelAssemblyParser.JNC, 0); }
		public ITerminalNode JumpLabel() { return GetToken(HighLevelAssemblyParser.JumpLabel, 0); }
		public JNCContext(OpcodeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJNC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_opcode);
		try {
			State = 443;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new MOV_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(MOV);
				State = 25; register_8bit();
				State = 26; Match(T__0);
				State = 27; register_8bit();
				}
				break;
			case 2:
				_localctx = new MOV_I_R8_R16Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; Match(MOV);
				State = 30; register_8bit();
				State = 31; Match(T__0);
				State = 32; Match(T__1);
				State = 33; register_16bit();
				State = 34; Match(T__2);
				}
				break;
			case 3:
				_localctx = new MOV_IPO_R8_R16Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; Match(MOV);
				State = 37; register_8bit();
				State = 38; Match(T__0);
				State = 39; Match(T__1);
				State = 40; register_16bit();
				State = 41; plus_sign();
				State = 42; @int();
				State = 43; Match(T__2);
				}
				break;
			case 4:
				_localctx = new MOV_IPRO_R8_R16Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 45; Match(MOV);
				State = 46; register_8bit();
				State = 47; Match(T__0);
				State = 48; Match(T__1);
				State = 49; register_16bit();
				State = 50; plus_sign();
				State = 51; register_8bit();
				State = 52; Match(T__2);
				}
				break;
			case 5:
				_localctx = new MOV_INO_R8_R16Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 54; Match(MOV);
				State = 55; register_8bit();
				State = 56; Match(T__0);
				State = 57; Match(T__1);
				State = 58; register_16bit();
				State = 59; minus_sign();
				State = 60; @int();
				State = 61; Match(T__2);
				}
				break;
			case 6:
				_localctx = new MOV_INRO_R8_R16Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 63; Match(MOV);
				State = 64; register_8bit();
				State = 65; Match(T__0);
				State = 66; Match(T__1);
				State = 67; register_16bit();
				State = 68; minus_sign();
				State = 69; register_8bit();
				State = 70; Match(T__2);
				}
				break;
			case 7:
				_localctx = new MOV_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 72; Match(MOV);
				State = 73; register_8bit();
				State = 74; Match(T__0);
				State = 75; @int();
				}
				break;
			case 8:
				_localctx = new MOV_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 77; Match(MOV);
				State = 78; register_8bit();
				State = 79; Match(T__0);
				State = 80; Match(EightBitBinaryValue);
				}
				break;
			case 9:
				_localctx = new MOV_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 82; Match(MOV);
				State = 83; register_8bit();
				State = 84; Match(T__0);
				State = 85; Match(T__3);
				State = 86; Match(HexValue);
				}
				break;
			case 10:
				_localctx = new MOV_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 88; Match(MOV);
				State = 89; register_8bit();
				State = 90; Match(T__0);
				State = 91; Match(HexValue);
				State = 92; Match(T__4);
				}
				break;
			case 11:
				_localctx = new MOV_IPO_R16_R8Context(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 94; Match(MOV);
				State = 95; Match(T__1);
				State = 96; register_16bit();
				State = 97; plus_sign();
				State = 98; @int();
				State = 99; Match(T__2);
				State = 100; Match(T__0);
				State = 101; register_8bit();
				}
				break;
			case 12:
				_localctx = new MOV_IPO_R16_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 103; Match(MOV);
				State = 104; Match(T__1);
				State = 105; register_16bit();
				State = 106; plus_sign();
				State = 107; @int();
				State = 108; Match(T__2);
				State = 109; Match(T__0);
				State = 110; @int();
				}
				break;
			case 13:
				_localctx = new MOV_IPO_R16_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 112; Match(MOV);
				State = 113; Match(T__1);
				State = 114; register_16bit();
				State = 115; plus_sign();
				State = 116; @int();
				State = 117; Match(T__2);
				State = 118; Match(T__0);
				State = 119; Match(EightBitBinaryValue);
				}
				break;
			case 14:
				_localctx = new MOV_IPO_R16_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 121; Match(MOV);
				State = 122; Match(T__1);
				State = 123; register_16bit();
				State = 124; plus_sign();
				State = 125; @int();
				State = 126; Match(T__2);
				State = 127; Match(T__0);
				State = 128; Match(T__3);
				State = 129; Match(HexValue);
				}
				break;
			case 15:
				_localctx = new MOV_IPO_R16_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 131; Match(MOV);
				State = 132; Match(T__1);
				State = 133; register_16bit();
				State = 134; plus_sign();
				State = 135; @int();
				State = 136; Match(T__2);
				State = 137; Match(T__0);
				State = 138; Match(HexValue);
				State = 139; Match(T__4);
				}
				break;
			case 16:
				_localctx = new MOV_IPRO_R16_R8Context(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 141; Match(MOV);
				State = 142; Match(T__1);
				State = 143; register_16bit();
				State = 144; plus_sign();
				State = 145; register_8bit();
				State = 146; Match(T__2);
				State = 147; Match(T__0);
				State = 148; register_8bit();
				}
				break;
			case 17:
				_localctx = new MOV_IPRO_R16_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 150; Match(MOV);
				State = 151; Match(T__1);
				State = 152; register_16bit();
				State = 153; plus_sign();
				State = 154; register_8bit();
				State = 155; Match(T__2);
				State = 156; Match(T__0);
				State = 157; @int();
				}
				break;
			case 18:
				_localctx = new MOV_IPRO_R16_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 159; Match(MOV);
				State = 160; Match(T__1);
				State = 161; register_16bit();
				State = 162; plus_sign();
				State = 163; register_8bit();
				State = 164; Match(T__2);
				State = 165; Match(T__0);
				State = 166; Match(EightBitBinaryValue);
				}
				break;
			case 19:
				_localctx = new MOV_IPRO_R16_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 168; Match(MOV);
				State = 169; Match(T__1);
				State = 170; register_16bit();
				State = 171; plus_sign();
				State = 172; register_8bit();
				State = 173; Match(T__2);
				State = 174; Match(T__0);
				State = 175; Match(T__3);
				State = 176; Match(HexValue);
				}
				break;
			case 20:
				_localctx = new MOV_IPRO_R16_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 178; Match(MOV);
				State = 179; Match(T__1);
				State = 180; register_16bit();
				State = 181; plus_sign();
				State = 182; register_8bit();
				State = 183; Match(T__2);
				State = 184; Match(T__0);
				State = 185; Match(HexValue);
				State = 186; Match(T__4);
				}
				break;
			case 21:
				_localctx = new MOV_INO_R16_R8Context(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 188; Match(MOV);
				State = 189; Match(T__1);
				State = 190; register_16bit();
				State = 191; minus_sign();
				State = 192; @int();
				State = 193; Match(T__2);
				State = 194; Match(T__0);
				State = 195; register_8bit();
				}
				break;
			case 22:
				_localctx = new MOV_INO_R16_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 197; Match(MOV);
				State = 198; Match(T__1);
				State = 199; register_16bit();
				State = 200; minus_sign();
				State = 201; @int();
				State = 202; Match(T__2);
				State = 203; Match(T__0);
				State = 204; @int();
				}
				break;
			case 23:
				_localctx = new MOV_INO_R16_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 206; Match(MOV);
				State = 207; Match(T__1);
				State = 208; register_16bit();
				State = 209; minus_sign();
				State = 210; @int();
				State = 211; Match(T__2);
				State = 212; Match(T__0);
				State = 213; Match(EightBitBinaryValue);
				}
				break;
			case 24:
				_localctx = new MOV_INO_R16_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 215; Match(MOV);
				State = 216; Match(T__1);
				State = 217; register_16bit();
				State = 218; minus_sign();
				State = 219; @int();
				State = 220; Match(T__2);
				State = 221; Match(T__0);
				State = 222; Match(T__3);
				State = 223; Match(HexValue);
				}
				break;
			case 25:
				_localctx = new MOV_INO_R16_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 225; Match(MOV);
				State = 226; Match(T__1);
				State = 227; register_16bit();
				State = 228; minus_sign();
				State = 229; @int();
				State = 230; Match(T__2);
				State = 231; Match(T__0);
				State = 232; Match(HexValue);
				State = 233; Match(T__4);
				}
				break;
			case 26:
				_localctx = new MOV_INRO_R16_R8Context(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 235; Match(MOV);
				State = 236; Match(T__1);
				State = 237; register_16bit();
				State = 238; minus_sign();
				State = 239; register_8bit();
				State = 240; Match(T__2);
				State = 241; Match(T__0);
				State = 242; register_8bit();
				}
				break;
			case 27:
				_localctx = new MOV_INRO_R16_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 244; Match(MOV);
				State = 245; Match(T__1);
				State = 246; register_16bit();
				State = 247; minus_sign();
				State = 248; register_8bit();
				State = 249; Match(T__2);
				State = 250; Match(T__0);
				State = 251; @int();
				}
				break;
			case 28:
				_localctx = new MOV_INRO_R16_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 253; Match(MOV);
				State = 254; Match(T__1);
				State = 255; register_16bit();
				State = 256; minus_sign();
				State = 257; register_8bit();
				State = 258; Match(T__2);
				State = 259; Match(T__0);
				State = 260; Match(EightBitBinaryValue);
				}
				break;
			case 29:
				_localctx = new MOV_INRO_R16_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 262; Match(MOV);
				State = 263; Match(T__1);
				State = 264; register_16bit();
				State = 265; minus_sign();
				State = 266; register_8bit();
				State = 267; Match(T__2);
				State = 268; Match(T__0);
				State = 269; Match(T__3);
				State = 270; Match(HexValue);
				}
				break;
			case 30:
				_localctx = new MOV_INRO_R16_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 272; Match(MOV);
				State = 273; Match(T__1);
				State = 274; register_16bit();
				State = 275; minus_sign();
				State = 276; register_8bit();
				State = 277; Match(T__2);
				State = 278; Match(T__0);
				State = 279; Match(HexValue);
				State = 280; Match(T__4);
				}
				break;
			case 31:
				_localctx = new MOV_I_R16_R8Context(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 282; Match(MOV);
				State = 283; Match(T__1);
				State = 284; register_16bit();
				State = 285; Match(T__2);
				State = 286; Match(T__0);
				State = 287; register_8bit();
				}
				break;
			case 32:
				_localctx = new MOV_I_R16_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 289; Match(MOV);
				State = 290; Match(T__1);
				State = 291; register_16bit();
				State = 292; Match(T__2);
				State = 293; Match(T__0);
				State = 294; @int();
				}
				break;
			case 33:
				_localctx = new MOV_I_R16_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 296; Match(MOV);
				State = 297; Match(T__1);
				State = 298; register_16bit();
				State = 299; Match(T__2);
				State = 300; Match(T__0);
				State = 301; Match(EightBitBinaryValue);
				}
				break;
			case 34:
				_localctx = new MOV_I_R16_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 303; Match(MOV);
				State = 304; Match(T__1);
				State = 305; register_16bit();
				State = 306; Match(T__2);
				State = 307; Match(T__0);
				State = 308; Match(T__3);
				State = 309; Match(HexValue);
				}
				break;
			case 35:
				_localctx = new MOV_I_R16_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 311; Match(MOV);
				State = 312; Match(T__1);
				State = 313; register_16bit();
				State = 314; Match(T__2);
				State = 315; Match(T__0);
				State = 316; Match(HexValue);
				State = 317; Match(T__4);
				}
				break;
			case 36:
				_localctx = new MOV16Context(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 319; Match(MOV);
				State = 320; register_16bit();
				State = 321; Match(T__0);
				State = 322; register_16bit();
				}
				break;
			case 37:
				_localctx = new ADD_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 324; Match(ADD);
				State = 325; register_8bit();
				State = 326; Match(T__0);
				State = 327; register_8bit();
				}
				break;
			case 38:
				_localctx = new ADD_R16_CONSTContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 329; Match(ADD);
				State = 330; register_16bit();
				State = 331; Match(T__0);
				State = 332; @int();
				}
				break;
			case 39:
				_localctx = new ADC_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 334; Match(ADC);
				State = 335; register_8bit();
				State = 336; Match(T__0);
				State = 337; register_8bit();
				}
				break;
			case 40:
				_localctx = new AND_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 339; Match(AND);
				State = 340; register_8bit();
				State = 341; Match(T__0);
				State = 342; register_8bit();
				}
				break;
			case 41:
				_localctx = new OR_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 344; Match(OR);
				State = 345; register_8bit();
				State = 346; Match(T__0);
				State = 347; register_8bit();
				}
				break;
			case 42:
				_localctx = new XOR_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 349; Match(XOR);
				State = 350; register_8bit();
				State = 351; Match(T__0);
				State = 352; register_8bit();
				}
				break;
			case 43:
				_localctx = new SHL_R8Context(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 354; Match(SHL);
				State = 355; register_8bit();
				}
				break;
			case 44:
				_localctx = new SHR_R8Context(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 356; Match(SHR);
				State = 357; register_8bit();
				}
				break;
			case 45:
				_localctx = new SAR_R8Context(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 358; Match(SAR);
				State = 359; register_8bit();
				}
				break;
			case 46:
				_localctx = new RCL_R8Context(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 360; Match(RCL);
				State = 361; register_8bit();
				}
				break;
			case 47:
				_localctx = new RCR_R8Context(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 362; Match(RCR);
				State = 363; register_8bit();
				}
				break;
			case 48:
				_localctx = new NOT_R8Context(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 364; Match(NOT);
				State = 365; register_8bit();
				}
				break;
			case 49:
				_localctx = new NEG_R8Context(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 366; Match(NEG);
				State = 367; register_8bit();
				}
				break;
			case 50:
				_localctx = new INC_R8Context(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 368; Match(INC);
				State = 369; register_8bit();
				}
				break;
			case 51:
				_localctx = new DEC_R8Context(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 370; Match(DEC);
				State = 371; register_8bit();
				}
				break;
			case 52:
				_localctx = new SUB_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 372; Match(SUB);
				State = 373; register_8bit();
				State = 374; Match(T__0);
				State = 375; register_8bit();
				}
				break;
			case 53:
				_localctx = new SUB_R16_CONSTContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 377; Match(SUB);
				State = 378; register_16bit();
				State = 379; Match(T__0);
				State = 380; @int();
				}
				break;
			case 54:
				_localctx = new SBB_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 382; Match(SBB);
				State = 383; register_8bit();
				State = 384; Match(T__0);
				State = 385; register_8bit();
				}
				break;
			case 55:
				_localctx = new CMP_R8_R8Context(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 387; Match(CMP);
				State = 388; register_8bit();
				State = 389; Match(T__0);
				State = 390; register_8bit();
				}
				break;
			case 56:
				_localctx = new PUSH_R8Context(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 392; Match(PUSH);
				State = 393; register_8bit();
				}
				break;
			case 57:
				_localctx = new PUSH_R16Context(_localctx);
				EnterOuterAlt(_localctx, 57);
				{
				State = 394; Match(PUSH);
				State = 395; register_16bit();
				}
				break;
			case 58:
				_localctx = new PUSH_CONST_BINARYContext(_localctx);
				EnterOuterAlt(_localctx, 58);
				{
				State = 396; Match(PUSH);
				State = 397; Match(EightBitBinaryValue);
				}
				break;
			case 59:
				_localctx = new PUSH_CONST_DECIMALContext(_localctx);
				EnterOuterAlt(_localctx, 59);
				{
				State = 398; Match(PUSH);
				State = 399; @int();
				}
				break;
			case 60:
				_localctx = new PUSH_CONST_HEX1Context(_localctx);
				EnterOuterAlt(_localctx, 60);
				{
				State = 400; Match(PUSH);
				State = 401; Match(T__3);
				State = 402; Match(HexValue);
				}
				break;
			case 61:
				_localctx = new PUSH_CONST_HEX2Context(_localctx);
				EnterOuterAlt(_localctx, 61);
				{
				State = 403; Match(PUSH);
				State = 404; Match(HexValue);
				State = 405; Match(T__4);
				}
				break;
			case 62:
				_localctx = new POP_R8Context(_localctx);
				EnterOuterAlt(_localctx, 62);
				{
				State = 406; Match(POP);
				State = 407; register_8bit();
				}
				break;
			case 63:
				_localctx = new POP_R16Context(_localctx);
				EnterOuterAlt(_localctx, 63);
				{
				State = 408; Match(POP);
				State = 409; register_16bit();
				}
				break;
			case 64:
				_localctx = new PUSHFContext(_localctx);
				EnterOuterAlt(_localctx, 64);
				{
				State = 410; Match(PUSHF);
				}
				break;
			case 65:
				_localctx = new POPFContext(_localctx);
				EnterOuterAlt(_localctx, 65);
				{
				State = 411; Match(POPF);
				}
				break;
			case 66:
				_localctx = new ENTERContext(_localctx);
				EnterOuterAlt(_localctx, 66);
				{
				State = 412; Match(ENTER);
				State = 413; @int();
				}
				break;
			case 67:
				_localctx = new LEAVEContext(_localctx);
				EnterOuterAlt(_localctx, 67);
				{
				State = 414; Match(LEAVE);
				}
				break;
			case 68:
				_localctx = new JMP_LABELContext(_localctx);
				EnterOuterAlt(_localctx, 68);
				{
				State = 415; Match(JumpLabel);
				}
				break;
			case 69:
				_localctx = new JMPContext(_localctx);
				EnterOuterAlt(_localctx, 69);
				{
				State = 416; Match(JMP);
				State = 417; Match(JumpLabel);
				}
				break;
			case 70:
				_localctx = new JZContext(_localctx);
				EnterOuterAlt(_localctx, 70);
				{
				State = 418; Match(JZ);
				State = 419; Match(JumpLabel);
				}
				break;
			case 71:
				_localctx = new JNZContext(_localctx);
				EnterOuterAlt(_localctx, 71);
				{
				State = 420; Match(JNZ);
				State = 421; Match(JumpLabel);
				}
				break;
			case 72:
				_localctx = new JNSContext(_localctx);
				EnterOuterAlt(_localctx, 72);
				{
				State = 422; Match(JNS);
				State = 423; Match(JumpLabel);
				}
				break;
			case 73:
				_localctx = new JNCContext(_localctx);
				EnterOuterAlt(_localctx, 73);
				{
				State = 424; Match(JNC);
				State = 425; Match(JumpLabel);
				}
				break;
			case 74:
				_localctx = new CALLContext(_localctx);
				EnterOuterAlt(_localctx, 74);
				{
				State = 426; Match(CALL);
				State = 427; Match(JumpLabel);
				}
				break;
			case 75:
				_localctx = new RETContext(_localctx);
				EnterOuterAlt(_localctx, 75);
				{
				State = 428; Match(RET);
				}
				break;
			case 76:
				_localctx = new INContext(_localctx);
				EnterOuterAlt(_localctx, 76);
				{
				State = 429; Match(IN);
				State = 430; port_8bit();
				}
				break;
			case 77:
				_localctx = new OUTContext(_localctx);
				EnterOuterAlt(_localctx, 77);
				{
				State = 431; Match(OUT);
				State = 432; out_port_8bit();
				}
				break;
			case 78:
				_localctx = new OUTBContext(_localctx);
				EnterOuterAlt(_localctx, 78);
				{
				State = 433; Match(OUTB);
				State = 434; register_8bit();
				}
				break;
			case 79:
				_localctx = new INTContext(_localctx);
				EnterOuterAlt(_localctx, 79);
				{
				State = 435; Match(INT);
				State = 436; @int();
				}
				break;
			case 80:
				_localctx = new NOPContext(_localctx);
				EnterOuterAlt(_localctx, 80);
				{
				State = 437; Match(NOP);
				}
				break;
			case 81:
				_localctx = new HLTContext(_localctx);
				EnterOuterAlt(_localctx, 81);
				{
				State = 438; Match(HLT);
				}
				break;
			case 82:
				_localctx = new DATAContext(_localctx);
				EnterOuterAlt(_localctx, 82);
				{
				State = 439; Match(DATA);
				State = 440; Match(SixteenBitBinaryValue);
				State = 441; Match(T__0);
				State = 442; Match(EightBitBinaryValue);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_8bitContext : ParserRuleContext {
		public ITerminalNode REG_8BIT() { return GetToken(HighLevelAssemblyParser.REG_8BIT, 0); }
		public Register_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_8bitContext register_8bit() {
		Register_8bitContext _localctx = new Register_8bitContext(Context, State);
		EnterRule(_localctx, 4, RULE_register_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(REG_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_16bitContext : ParserRuleContext {
		public ITerminalNode REG_16BIT() { return GetToken(HighLevelAssemblyParser.REG_16BIT, 0); }
		public Register_16bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_16bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_16bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_16bitContext register_16bit() {
		Register_16bitContext _localctx = new Register_16bitContext(Context, State);
		EnterRule(_localctx, 6, RULE_register_16bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(REG_16BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_8bitContext : ParserRuleContext {
		public ITerminalNode PORT_8BIT() { return GetToken(HighLevelAssemblyParser.PORT_8BIT, 0); }
		public Port_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_8bitContext port_8bit() {
		Port_8bitContext _localctx = new Port_8bitContext(Context, State);
		EnterRule(_localctx, 8, RULE_port_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(PORT_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_port_8bitContext : ParserRuleContext {
		public ITerminalNode OUT_PORT_8BIT() { return GetToken(HighLevelAssemblyParser.OUT_PORT_8BIT, 0); }
		public Out_port_8bitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_port_8bit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_port_8bit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_port_8bitContext out_port_8bit() {
		Out_port_8bitContext _localctx = new Out_port_8bitContext(Context, State);
		EnterRule(_localctx, 10, RULE_out_port_8bit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(OUT_PORT_8BIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plus_signContext : ParserRuleContext {
		public ITerminalNode PLUS_SIGN() { return GetToken(HighLevelAssemblyParser.PLUS_SIGN, 0); }
		public Plus_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plus_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Plus_signContext plus_sign() {
		Plus_signContext _localctx = new Plus_signContext(Context, State);
		EnterRule(_localctx, 12, RULE_plus_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(PLUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Minus_signContext : ParserRuleContext {
		public ITerminalNode MINUS_SIGN() { return GetToken(HighLevelAssemblyParser.MINUS_SIGN, 0); }
		public Minus_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minus_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Minus_signContext minus_sign() {
		Minus_signContext _localctx = new Minus_signContext(Context, State);
		EnterRule(_localctx, 14, RULE_minus_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(HighLevelAssemblyParser.NUMBER, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHighLevelAssemblyVisitor<TResult> typedVisitor = visitor as IHighLevelAssemblyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 16, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3;\x1CE\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x3\x2\x3\x2\x6\x2\x17\n\x2\r\x2\xE\x2\x18\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x1BE\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a"+
		"\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x2\x2\v\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x2\x2\x217\x2\x16\x3\x2\x2\x2\x4\x1BD\x3\x2\x2\x2\x6\x1BF\x3\x2\x2"+
		"\x2\b\x1C1\x3\x2\x2\x2\n\x1C3\x3\x2\x2\x2\f\x1C5\x3\x2\x2\x2\xE\x1C7\x3"+
		"\x2\x2\x2\x10\x1C9\x3\x2\x2\x2\x12\x1CB\x3\x2\x2\x2\x14\x17\x5\x4\x3\x2"+
		"\x15\x17\a;\x2\x2\x16\x14\x3\x2\x2\x2\x16\x15\x3\x2\x2\x2\x17\x18\x3\x2"+
		"\x2\x2\x18\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x3\x3\x2\x2\x2\x1A"+
		"\x1B\a\b\x2\x2\x1B\x1C\x5\x6\x4\x2\x1C\x1D\a\x3\x2\x2\x1D\x1E\x5\x6\x4"+
		"\x2\x1E\x1BE\x3\x2\x2\x2\x1F \a\b\x2\x2 !\x5\x6\x4\x2!\"\a\x3\x2\x2\""+
		"#\a\x4\x2\x2#$\x5\b\x5\x2$%\a\x5\x2\x2%\x1BE\x3\x2\x2\x2&\'\a\b\x2\x2"+
		"\'(\x5\x6\x4\x2()\a\x3\x2\x2)*\a\x4\x2\x2*+\x5\b\x5\x2+,\x5\xE\b\x2,-"+
		"\x5\x12\n\x2-.\a\x5\x2\x2.\x1BE\x3\x2\x2\x2/\x30\a\b\x2\x2\x30\x31\x5"+
		"\x6\x4\x2\x31\x32\a\x3\x2\x2\x32\x33\a\x4\x2\x2\x33\x34\x5\b\x5\x2\x34"+
		"\x35\x5\xE\b\x2\x35\x36\x5\x6\x4\x2\x36\x37\a\x5\x2\x2\x37\x1BE\x3\x2"+
		"\x2\x2\x38\x39\a\b\x2\x2\x39:\x5\x6\x4\x2:;\a\x3\x2\x2;<\a\x4\x2\x2<="+
		"\x5\b\x5\x2=>\x5\x10\t\x2>?\x5\x12\n\x2?@\a\x5\x2\x2@\x1BE\x3\x2\x2\x2"+
		"\x41\x42\a\b\x2\x2\x42\x43\x5\x6\x4\x2\x43\x44\a\x3\x2\x2\x44\x45\a\x4"+
		"\x2\x2\x45\x46\x5\b\x5\x2\x46G\x5\x10\t\x2GH\x5\x6\x4\x2HI\a\x5\x2\x2"+
		"I\x1BE\x3\x2\x2\x2JK\a\b\x2\x2KL\x5\x6\x4\x2LM\a\x3\x2\x2MN\x5\x12\n\x2"+
		"N\x1BE\x3\x2\x2\x2OP\a\b\x2\x2PQ\x5\x6\x4\x2QR\a\x3\x2\x2RS\a\x34\x2\x2"+
		"S\x1BE\x3\x2\x2\x2TU\a\b\x2\x2UV\x5\x6\x4\x2VW\a\x3\x2\x2WX\a\x6\x2\x2"+
		"XY\a\x36\x2\x2Y\x1BE\x3\x2\x2\x2Z[\a\b\x2\x2[\\\x5\x6\x4\x2\\]\a\x3\x2"+
		"\x2]^\a\x36\x2\x2^_\a\a\x2\x2_\x1BE\x3\x2\x2\x2`\x61\a\b\x2\x2\x61\x62"+
		"\a\x4\x2\x2\x62\x63\x5\b\x5\x2\x63\x64\x5\xE\b\x2\x64\x65\x5\x12\n\x2"+
		"\x65\x66\a\x5\x2\x2\x66g\a\x3\x2\x2gh\x5\x6\x4\x2h\x1BE\x3\x2\x2\x2ij"+
		"\a\b\x2\x2jk\a\x4\x2\x2kl\x5\b\x5\x2lm\x5\xE\b\x2mn\x5\x12\n\x2no\a\x5"+
		"\x2\x2op\a\x3\x2\x2pq\x5\x12\n\x2q\x1BE\x3\x2\x2\x2rs\a\b\x2\x2st\a\x4"+
		"\x2\x2tu\x5\b\x5\x2uv\x5\xE\b\x2vw\x5\x12\n\x2wx\a\x5\x2\x2xy\a\x3\x2"+
		"\x2yz\a\x34\x2\x2z\x1BE\x3\x2\x2\x2{|\a\b\x2\x2|}\a\x4\x2\x2}~\x5\b\x5"+
		"\x2~\x7F\x5\xE\b\x2\x7F\x80\x5\x12\n\x2\x80\x81\a\x5\x2\x2\x81\x82\a\x3"+
		"\x2\x2\x82\x83\a\x6\x2\x2\x83\x84\a\x36\x2\x2\x84\x1BE\x3\x2\x2\x2\x85"+
		"\x86\a\b\x2\x2\x86\x87\a\x4\x2\x2\x87\x88\x5\b\x5\x2\x88\x89\x5\xE\b\x2"+
		"\x89\x8A\x5\x12\n\x2\x8A\x8B\a\x5\x2\x2\x8B\x8C\a\x3\x2\x2\x8C\x8D\a\x36"+
		"\x2\x2\x8D\x8E\a\a\x2\x2\x8E\x1BE\x3\x2\x2\x2\x8F\x90\a\b\x2\x2\x90\x91"+
		"\a\x4\x2\x2\x91\x92\x5\b\x5\x2\x92\x93\x5\xE\b\x2\x93\x94\x5\x6\x4\x2"+
		"\x94\x95\a\x5\x2\x2\x95\x96\a\x3\x2\x2\x96\x97\x5\x6\x4\x2\x97\x1BE\x3"+
		"\x2\x2\x2\x98\x99\a\b\x2\x2\x99\x9A\a\x4\x2\x2\x9A\x9B\x5\b\x5\x2\x9B"+
		"\x9C\x5\xE\b\x2\x9C\x9D\x5\x6\x4\x2\x9D\x9E\a\x5\x2\x2\x9E\x9F\a\x3\x2"+
		"\x2\x9F\xA0\x5\x12\n\x2\xA0\x1BE\x3\x2\x2\x2\xA1\xA2\a\b\x2\x2\xA2\xA3"+
		"\a\x4\x2\x2\xA3\xA4\x5\b\x5\x2\xA4\xA5\x5\xE\b\x2\xA5\xA6\x5\x6\x4\x2"+
		"\xA6\xA7\a\x5\x2\x2\xA7\xA8\a\x3\x2\x2\xA8\xA9\a\x34\x2\x2\xA9\x1BE\x3"+
		"\x2\x2\x2\xAA\xAB\a\b\x2\x2\xAB\xAC\a\x4\x2\x2\xAC\xAD\x5\b\x5\x2\xAD"+
		"\xAE\x5\xE\b\x2\xAE\xAF\x5\x6\x4\x2\xAF\xB0\a\x5\x2\x2\xB0\xB1\a\x3\x2"+
		"\x2\xB1\xB2\a\x6\x2\x2\xB2\xB3\a\x36\x2\x2\xB3\x1BE\x3\x2\x2\x2\xB4\xB5"+
		"\a\b\x2\x2\xB5\xB6\a\x4\x2\x2\xB6\xB7\x5\b\x5\x2\xB7\xB8\x5\xE\b\x2\xB8"+
		"\xB9\x5\x6\x4\x2\xB9\xBA\a\x5\x2\x2\xBA\xBB\a\x3\x2\x2\xBB\xBC\a\x36\x2"+
		"\x2\xBC\xBD\a\a\x2\x2\xBD\x1BE\x3\x2\x2\x2\xBE\xBF\a\b\x2\x2\xBF\xC0\a"+
		"\x4\x2\x2\xC0\xC1\x5\b\x5\x2\xC1\xC2\x5\x10\t\x2\xC2\xC3\x5\x12\n\x2\xC3"+
		"\xC4\a\x5\x2\x2\xC4\xC5\a\x3\x2\x2\xC5\xC6\x5\x6\x4\x2\xC6\x1BE\x3\x2"+
		"\x2\x2\xC7\xC8\a\b\x2\x2\xC8\xC9\a\x4\x2\x2\xC9\xCA\x5\b\x5\x2\xCA\xCB"+
		"\x5\x10\t\x2\xCB\xCC\x5\x12\n\x2\xCC\xCD\a\x5\x2\x2\xCD\xCE\a\x3\x2\x2"+
		"\xCE\xCF\x5\x12\n\x2\xCF\x1BE\x3\x2\x2\x2\xD0\xD1\a\b\x2\x2\xD1\xD2\a"+
		"\x4\x2\x2\xD2\xD3\x5\b\x5\x2\xD3\xD4\x5\x10\t\x2\xD4\xD5\x5\x12\n\x2\xD5"+
		"\xD6\a\x5\x2\x2\xD6\xD7\a\x3\x2\x2\xD7\xD8\a\x34\x2\x2\xD8\x1BE\x3\x2"+
		"\x2\x2\xD9\xDA\a\b\x2\x2\xDA\xDB\a\x4\x2\x2\xDB\xDC\x5\b\x5\x2\xDC\xDD"+
		"\x5\x10\t\x2\xDD\xDE\x5\x12\n\x2\xDE\xDF\a\x5\x2\x2\xDF\xE0\a\x3\x2\x2"+
		"\xE0\xE1\a\x6\x2\x2\xE1\xE2\a\x36\x2\x2\xE2\x1BE\x3\x2\x2\x2\xE3\xE4\a"+
		"\b\x2\x2\xE4\xE5\a\x4\x2\x2\xE5\xE6\x5\b\x5\x2\xE6\xE7\x5\x10\t\x2\xE7"+
		"\xE8\x5\x12\n\x2\xE8\xE9\a\x5\x2\x2\xE9\xEA\a\x3\x2\x2\xEA\xEB\a\x36\x2"+
		"\x2\xEB\xEC\a\a\x2\x2\xEC\x1BE\x3\x2\x2\x2\xED\xEE\a\b\x2\x2\xEE\xEF\a"+
		"\x4\x2\x2\xEF\xF0\x5\b\x5\x2\xF0\xF1\x5\x10\t\x2\xF1\xF2\x5\x6\x4\x2\xF2"+
		"\xF3\a\x5\x2\x2\xF3\xF4\a\x3\x2\x2\xF4\xF5\x5\x6\x4\x2\xF5\x1BE\x3\x2"+
		"\x2\x2\xF6\xF7\a\b\x2\x2\xF7\xF8\a\x4\x2\x2\xF8\xF9\x5\b\x5\x2\xF9\xFA"+
		"\x5\x10\t\x2\xFA\xFB\x5\x6\x4\x2\xFB\xFC\a\x5\x2\x2\xFC\xFD\a\x3\x2\x2"+
		"\xFD\xFE\x5\x12\n\x2\xFE\x1BE\x3\x2\x2\x2\xFF\x100\a\b\x2\x2\x100\x101"+
		"\a\x4\x2\x2\x101\x102\x5\b\x5\x2\x102\x103\x5\x10\t\x2\x103\x104\x5\x6"+
		"\x4\x2\x104\x105\a\x5\x2\x2\x105\x106\a\x3\x2\x2\x106\x107\a\x34\x2\x2"+
		"\x107\x1BE\x3\x2\x2\x2\x108\x109\a\b\x2\x2\x109\x10A\a\x4\x2\x2\x10A\x10B"+
		"\x5\b\x5\x2\x10B\x10C\x5\x10\t\x2\x10C\x10D\x5\x6\x4\x2\x10D\x10E\a\x5"+
		"\x2\x2\x10E\x10F\a\x3\x2\x2\x10F\x110\a\x6\x2\x2\x110\x111\a\x36\x2\x2"+
		"\x111\x1BE\x3\x2\x2\x2\x112\x113\a\b\x2\x2\x113\x114\a\x4\x2\x2\x114\x115"+
		"\x5\b\x5\x2\x115\x116\x5\x10\t\x2\x116\x117\x5\x6\x4\x2\x117\x118\a\x5"+
		"\x2\x2\x118\x119\a\x3\x2\x2\x119\x11A\a\x36\x2\x2\x11A\x11B\a\a\x2\x2"+
		"\x11B\x1BE\x3\x2\x2\x2\x11C\x11D\a\b\x2\x2\x11D\x11E\a\x4\x2\x2\x11E\x11F"+
		"\x5\b\x5\x2\x11F\x120\a\x5\x2\x2\x120\x121\a\x3\x2\x2\x121\x122\x5\x6"+
		"\x4\x2\x122\x1BE\x3\x2\x2\x2\x123\x124\a\b\x2\x2\x124\x125\a\x4\x2\x2"+
		"\x125\x126\x5\b\x5\x2\x126\x127\a\x5\x2\x2\x127\x128\a\x3\x2\x2\x128\x129"+
		"\x5\x12\n\x2\x129\x1BE\x3\x2\x2\x2\x12A\x12B\a\b\x2\x2\x12B\x12C\a\x4"+
		"\x2\x2\x12C\x12D\x5\b\x5\x2\x12D\x12E\a\x5\x2\x2\x12E\x12F\a\x3\x2\x2"+
		"\x12F\x130\a\x34\x2\x2\x130\x1BE\x3\x2\x2\x2\x131\x132\a\b\x2\x2\x132"+
		"\x133\a\x4\x2\x2\x133\x134\x5\b\x5\x2\x134\x135\a\x5\x2\x2\x135\x136\a"+
		"\x3\x2\x2\x136\x137\a\x6\x2\x2\x137\x138\a\x36\x2\x2\x138\x1BE\x3\x2\x2"+
		"\x2\x139\x13A\a\b\x2\x2\x13A\x13B\a\x4\x2\x2\x13B\x13C\x5\b\x5\x2\x13C"+
		"\x13D\a\x5\x2\x2\x13D\x13E\a\x3\x2\x2\x13E\x13F\a\x36\x2\x2\x13F\x140"+
		"\a\a\x2\x2\x140\x1BE\x3\x2\x2\x2\x141\x142\a\b\x2\x2\x142\x143\x5\b\x5"+
		"\x2\x143\x144\a\x3\x2\x2\x144\x145\x5\b\x5\x2\x145\x1BE\x3\x2\x2\x2\x146"+
		"\x147\a\t\x2\x2\x147\x148\x5\x6\x4\x2\x148\x149\a\x3\x2\x2\x149\x14A\x5"+
		"\x6\x4\x2\x14A\x1BE\x3\x2\x2\x2\x14B\x14C\a\t\x2\x2\x14C\x14D\x5\b\x5"+
		"\x2\x14D\x14E\a\x3\x2\x2\x14E\x14F\x5\x12\n\x2\x14F\x1BE\x3\x2\x2\x2\x150"+
		"\x151\a\n\x2\x2\x151\x152\x5\x6\x4\x2\x152\x153\a\x3\x2\x2\x153\x154\x5"+
		"\x6\x4\x2\x154\x1BE\x3\x2\x2\x2\x155\x156\a\v\x2\x2\x156\x157\x5\x6\x4"+
		"\x2\x157\x158\a\x3\x2\x2\x158\x159\x5\x6\x4\x2\x159\x1BE\x3\x2\x2\x2\x15A"+
		"\x15B\a\f\x2\x2\x15B\x15C\x5\x6\x4\x2\x15C\x15D\a\x3\x2\x2\x15D\x15E\x5"+
		"\x6\x4\x2\x15E\x1BE\x3\x2\x2\x2\x15F\x160\a\r\x2\x2\x160\x161\x5\x6\x4"+
		"\x2\x161\x162\a\x3\x2\x2\x162\x163\x5\x6\x4\x2\x163\x1BE\x3\x2\x2\x2\x164"+
		"\x165\a\xE\x2\x2\x165\x1BE\x5\x6\x4\x2\x166\x167\a\xF\x2\x2\x167\x1BE"+
		"\x5\x6\x4\x2\x168\x169\a\x10\x2\x2\x169\x1BE\x5\x6\x4\x2\x16A\x16B\a\x11"+
		"\x2\x2\x16B\x1BE\x5\x6\x4\x2\x16C\x16D\a\x12\x2\x2\x16D\x1BE\x5\x6\x4"+
		"\x2\x16E\x16F\a\x13\x2\x2\x16F\x1BE\x5\x6\x4\x2\x170\x171\a\x14\x2\x2"+
		"\x171\x1BE\x5\x6\x4\x2\x172\x173\a\x15\x2\x2\x173\x1BE\x5\x6\x4\x2\x174"+
		"\x175\a\x16\x2\x2\x175\x1BE\x5\x6\x4\x2\x176\x177\a\x17\x2\x2\x177\x178"+
		"\x5\x6\x4\x2\x178\x179\a\x3\x2\x2\x179\x17A\x5\x6\x4\x2\x17A\x1BE\x3\x2"+
		"\x2\x2\x17B\x17C\a\x17\x2\x2\x17C\x17D\x5\b\x5\x2\x17D\x17E\a\x3\x2\x2"+
		"\x17E\x17F\x5\x12\n\x2\x17F\x1BE\x3\x2\x2\x2\x180\x181\a\x18\x2\x2\x181"+
		"\x182\x5\x6\x4\x2\x182\x183\a\x3\x2\x2\x183\x184\x5\x6\x4\x2\x184\x1BE"+
		"\x3\x2\x2\x2\x185\x186\a\x19\x2\x2\x186\x187\x5\x6\x4\x2\x187\x188\a\x3"+
		"\x2\x2\x188\x189\x5\x6\x4\x2\x189\x1BE\x3\x2\x2\x2\x18A\x18B\a\x1A\x2"+
		"\x2\x18B\x1BE\x5\x6\x4\x2\x18C\x18D\a\x1A\x2\x2\x18D\x1BE\x5\b\x5\x2\x18E"+
		"\x18F\a\x1A\x2\x2\x18F\x1BE\a\x34\x2\x2\x190\x191\a\x1A\x2\x2\x191\x1BE"+
		"\x5\x12\n\x2\x192\x193\a\x1A\x2\x2\x193\x194\a\x6\x2\x2\x194\x1BE\a\x36"+
		"\x2\x2\x195\x196\a\x1A\x2\x2\x196\x197\a\x36\x2\x2\x197\x1BE\a\a\x2\x2"+
		"\x198\x199\a\x1B\x2\x2\x199\x1BE\x5\x6\x4\x2\x19A\x19B\a\x1B\x2\x2\x19B"+
		"\x1BE\x5\b\x5\x2\x19C\x1BE\a\x1C\x2\x2\x19D\x1BE\a\x1D\x2\x2\x19E\x19F"+
		"\a(\x2\x2\x19F\x1BE\x5\x12\n\x2\x1A0\x1BE\a)\x2\x2\x1A1\x1BE\a\x37\x2"+
		"\x2\x1A2\x1A3\a\x1E\x2\x2\x1A3\x1BE\a\x37\x2\x2\x1A4\x1A5\a\x1F\x2\x2"+
		"\x1A5\x1BE\a\x37\x2\x2\x1A6\x1A7\a!\x2\x2\x1A7\x1BE\a\x37\x2\x2\x1A8\x1A9"+
		"\a \x2\x2\x1A9\x1BE\a\x37\x2\x2\x1AA\x1AB\a\"\x2\x2\x1AB\x1BE\a\x37\x2"+
		"\x2\x1AC\x1AD\a#\x2\x2\x1AD\x1BE\a\x37\x2\x2\x1AE\x1BE\a$\x2\x2\x1AF\x1B0"+
		"\a%\x2\x2\x1B0\x1BE\x5\n\x6\x2\x1B1\x1B2\a&\x2\x2\x1B2\x1BE\x5\f\a\x2"+
		"\x1B3\x1B4\a\'\x2\x2\x1B4\x1BE\x5\x6\x4\x2\x1B5\x1B6\a*\x2\x2\x1B6\x1BE"+
		"\x5\x12\n\x2\x1B7\x1BE\a+\x2\x2\x1B8\x1BE\a,\x2\x2\x1B9\x1BA\a-\x2\x2"+
		"\x1BA\x1BB\a\x35\x2\x2\x1BB\x1BC\a\x3\x2\x2\x1BC\x1BE\a\x34\x2\x2\x1BD"+
		"\x1A\x3\x2\x2\x2\x1BD\x1F\x3\x2\x2\x2\x1BD&\x3\x2\x2\x2\x1BD/\x3\x2\x2"+
		"\x2\x1BD\x38\x3\x2\x2\x2\x1BD\x41\x3\x2\x2\x2\x1BDJ\x3\x2\x2\x2\x1BDO"+
		"\x3\x2\x2\x2\x1BDT\x3\x2\x2\x2\x1BDZ\x3\x2\x2\x2\x1BD`\x3\x2\x2\x2\x1BD"+
		"i\x3\x2\x2\x2\x1BDr\x3\x2\x2\x2\x1BD{\x3\x2\x2\x2\x1BD\x85\x3\x2\x2\x2"+
		"\x1BD\x8F\x3\x2\x2\x2\x1BD\x98\x3\x2\x2\x2\x1BD\xA1\x3\x2\x2\x2\x1BD\xAA"+
		"\x3\x2\x2\x2\x1BD\xB4\x3\x2\x2\x2\x1BD\xBE\x3\x2\x2\x2\x1BD\xC7\x3\x2"+
		"\x2\x2\x1BD\xD0\x3\x2\x2\x2\x1BD\xD9\x3\x2\x2\x2\x1BD\xE3\x3\x2\x2\x2"+
		"\x1BD\xED\x3\x2\x2\x2\x1BD\xF6\x3\x2\x2\x2\x1BD\xFF\x3\x2\x2\x2\x1BD\x108"+
		"\x3\x2\x2\x2\x1BD\x112\x3\x2\x2\x2\x1BD\x11C\x3\x2\x2\x2\x1BD\x123\x3"+
		"\x2\x2\x2\x1BD\x12A\x3\x2\x2\x2\x1BD\x131\x3\x2\x2\x2\x1BD\x139\x3\x2"+
		"\x2\x2\x1BD\x141\x3\x2\x2\x2\x1BD\x146\x3\x2\x2\x2\x1BD\x14B\x3\x2\x2"+
		"\x2\x1BD\x150\x3\x2\x2\x2\x1BD\x155\x3\x2\x2\x2\x1BD\x15A\x3\x2\x2\x2"+
		"\x1BD\x15F\x3\x2\x2\x2\x1BD\x164\x3\x2\x2\x2\x1BD\x166\x3\x2\x2\x2\x1BD"+
		"\x168\x3\x2\x2\x2\x1BD\x16A\x3\x2\x2\x2\x1BD\x16C\x3\x2\x2\x2\x1BD\x16E"+
		"\x3\x2\x2\x2\x1BD\x170\x3\x2\x2\x2\x1BD\x172\x3\x2\x2\x2\x1BD\x174\x3"+
		"\x2\x2\x2\x1BD\x176\x3\x2\x2\x2\x1BD\x17B\x3\x2\x2\x2\x1BD\x180\x3\x2"+
		"\x2\x2\x1BD\x185\x3\x2\x2\x2\x1BD\x18A\x3\x2\x2\x2\x1BD\x18C\x3\x2\x2"+
		"\x2\x1BD\x18E\x3\x2\x2\x2\x1BD\x190\x3\x2\x2\x2\x1BD\x192\x3\x2\x2\x2"+
		"\x1BD\x195\x3\x2\x2\x2\x1BD\x198\x3\x2\x2\x2\x1BD\x19A\x3\x2\x2\x2\x1BD"+
		"\x19C\x3\x2\x2\x2\x1BD\x19D\x3\x2\x2\x2\x1BD\x19E\x3\x2\x2\x2\x1BD\x1A0"+
		"\x3\x2\x2\x2\x1BD\x1A1\x3\x2\x2\x2\x1BD\x1A2\x3\x2\x2\x2\x1BD\x1A4\x3"+
		"\x2\x2\x2\x1BD\x1A6\x3\x2\x2\x2\x1BD\x1A8\x3\x2\x2\x2\x1BD\x1AA\x3\x2"+
		"\x2\x2\x1BD\x1AC\x3\x2\x2\x2\x1BD\x1AE\x3\x2\x2\x2\x1BD\x1AF\x3\x2\x2"+
		"\x2\x1BD\x1B1\x3\x2\x2\x2\x1BD\x1B3\x3\x2\x2\x2\x1BD\x1B5\x3\x2\x2\x2"+
		"\x1BD\x1B7\x3\x2\x2\x2\x1BD\x1B8\x3\x2\x2\x2\x1BD\x1B9\x3\x2\x2\x2\x1BE"+
		"\x5\x3\x2\x2\x2\x1BF\x1C0\a.\x2\x2\x1C0\a\x3\x2\x2\x2\x1C1\x1C2\a/\x2"+
		"\x2\x1C2\t\x3\x2\x2\x2\x1C3\x1C4\a\x30\x2\x2\x1C4\v\x3\x2\x2\x2\x1C5\x1C6"+
		"\a\x31\x2\x2\x1C6\r\x3\x2\x2\x2\x1C7\x1C8\a\x32\x2\x2\x1C8\xF\x3\x2\x2"+
		"\x2\x1C9\x1CA\a\x33\x2\x2\x1CA\x11\x3\x2\x2\x2\x1CB\x1CC\a\x38\x2\x2\x1CC"+
		"\x13\x3\x2\x2\x2\x5\x16\x18\x1BD";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
